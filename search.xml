<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Head First Java 第五章学习笔记</title>
    <url>/2021/03/05/Head%20First%20Java%20%E7%AC%AC%E4%BA%94%E7%AB%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="编写程序"><a href="#编写程序" class="headerlink" title="编写程序"></a>编写程序</h3><ol>
<li>编写类的建议流程</li>
</ol>
<ul>
<li>确定类的功能</li>
<li>列出实例变量和方法</li>
<li>编写方法的伪码</li>
<li>编写方法的测试用程序</li>
<li>实现类</li>
<li>测试方法</li>
<li>出错/重新设计</li>
</ul>
<ol start="2">
<li>加强版<code>for</code>循环</li>
</ol>
<ul>
<li><p><code>for each</code>循环</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(String name:nameArray)&#123;&#125;</span><br><span class="line"><span class="comment">// String不是固定的，是根据后面数组元素类型写的</span></span><br><span class="line"><span class="comment">// name自己定</span></span><br></pre></td></tr></table></figure>
<p>类似于python里的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>[]:</span><br><span class="line">    ......</span><br></pre></td></tr></table></figure>
<span id="more"></span></li>
<li><p>java还支持两个变量控制<code>for</code>循环</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> a=<span class="number">1</span>,b=<span class="number">4</span>;a &lt; b;a++,b--)&#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>还有就是三个部分是可以缺省的，初始化可以放在循环体外部，增量表达可以放在循环体内部，条件表达式不推荐缺省。</p>
</li>
</ul>
<ol start="3">
<li><p>转换primitive主数据类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> variable_int = Integar.parseInt(variable_str);</span><br></pre></td></tr></table></figure></li>
<li><p><code>i++</code>vs<code>++i</code></p>
<p> <code>i++</code>:先运用变量的值再执行加减操作</p>
<p> <code>++i</code>:先执行加减操作再运用变量的值</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>技术笔记</tag>
        <tag>Head First Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Head First Java 第四章学习笔记</title>
    <url>/2021/03/05/Head%20First%20Java%20%E7%AC%AC%E5%9B%9B%E7%AB%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="方法操作实例变量"><a href="#方法操作实例变量" class="headerlink" title="方法操作实例变量"></a>方法操作实例变量</h3><ol>
<li><p>如果方法被声明为有返回类型，那么必须返回所声明的类型</p>
</li>
<li><p>Java通过拷贝传递值</p>
</li>
<li><p>封装</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String brand;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setBrand</span><span class="params">(String abrand)</span></span>&#123;</span><br><span class="line">    brand = abrand;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">String <span class="title">getBrand</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> brand;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> <strong>封装的基本原则</strong>：将实例变量标记为<code>private</code>,将<code>getters</code>、<code>setters</code>标记为<code>public</code>。</p>
<span id="more"></span></li>
<li><p>可以手动初始化实例变量，如果没有手动初始化的话也是默认有值的。</p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">默认值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">integers(包括char)</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">floating points</td>
<td align="center">0.0</td>
</tr>
<tr>
<td align="center">booleans</td>
<td align="center">False</td>
</tr>
<tr>
<td align="center">references</td>
<td align="center">null</td>
</tr>
</tbody></table>
</li>
<li><p>实例变量与局部变量之间的差别</p>
<ul>
<li>实例变量声明在类内而非方法中</li>
<li>局部变量声明在方法内</li>
<li>局部变量在使用前必须初始化</li>
</ul>
</li>
<li><p>变量的比较</p>
<ul>
<li>使用<code>==</code>比较两个primitive主数据类型是否相等，或者判断两个引用是否引用同一个对象  <figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">byte</span> b = <span class="number">3</span>;</span><br><span class="line">System.out.println(a == b);  # true</span><br><span class="line"># 只是比较字节组合，无关类型</span><br></pre></td></tr></table></figure></li>
<li>使用<code>equals()</code>判断两个对象在意义上是否相等，例如两个String对象是否有相同字节</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>技术笔记</tag>
        <tag>Head First Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Head First Java 第三章学习笔记</title>
    <url>/2021/03/05/Head%20First%20Java%20%E7%AC%AC%E4%B8%89%E7%AB%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="第三章-primitive主数据类型和引用"><a href="#第三章-primitive主数据类型和引用" class="headerlink" title="第三章  primitive主数据类型和引用"></a>第三章  primitive主数据类型和引用</h2><ol>
<li><p>变量有两种：<code>primitive主数据类型</code>、<code>引用</code></p>
<ul>
<li><p><code>primitive主数据类型</code><br>保存基本类型的值</p>
</li>
<li><p><code>引用</code><br>保存对象的引用</p>
<span id="more"></span></li>
</ul>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">类型</th>
<th align="center">位数</th>
<th align="center">值域</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>boolean</code></td>
<td align="center">boolean</td>
<td align="center">JVM决定</td>
<td align="center">True或False</td>
</tr>
<tr>
<td align="center"><code>char</code></td>
<td align="center">char</td>
<td align="center">16bits</td>
<td align="center">0~65535</td>
</tr>
<tr>
<td align="center"><code>integer</code></td>
<td align="center">byte</td>
<td align="center">8bits</td>
<td align="center">-128~127</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">short</td>
<td align="center">16bits</td>
<td align="center">-2^15 ~ 2^15 -1</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">int</td>
<td align="center">32bits</td>
<td align="center">-2^31 ~ 2^31-1</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">long</td>
<td align="center">64bits</td>
<td align="center">-很大~+很大</td>
</tr>
<tr>
<td align="center"><code>浮点型</code></td>
<td align="center">float</td>
<td align="center">32bits</td>
<td align="center">范围规模可变</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">doubale</td>
<td align="center">64bits</td>
<td align="center">范围规模可变</td>
</tr>
</tbody></table>
<p> 小数默认为<code>double</code>,<code>float</code>标注为：float a = 3.14f;</p>
</li>
<li><p>primitive主数据类型赋值时要小心溢出</p>
</li>
<li><p>对象引用</p>
<ul>
<li>没有对象变量，只有<strong>引用到对象的变量</strong>。</li>
<li>对象引用变量保存的是存取变量的方法</li>
<li><strong>对象引用变量</strong>并不是对象的容器，而是<strong>类似指向对象的指针，或者是地址</strong>。在Java中不知道也不必知道引用变量中实际装载的是什么，只有JVM才会知道如何使用引用来取得该对象。</li>
</ul>
</li>
<li><p>对象声明、创建于赋值的3个步骤</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Dog myDog = <span class="keyword">new</span> Dog();</span><br></pre></td></tr></table></figure>
<ol>
<li>声明一个引用变量 <code>Dog myDog</code>：要求JVM分配空间给引用变量，此引用变量永远是Dog类型。但是myDog可以引用不同的Dog，除非被<code>final</code>修饰，那样只能引用固定的Dog不会再变。也可以引用到空指针。</li>
<li>创建对象 <code>new Dog()</code>：要求JVM分配堆空间给新建的Dog对象。</li>
<li>连接对象和引用 <code>=</code></li>
</ol>
</li>
<li><p>int数组</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">7</span>];</span><br></pre></td></tr></table></figure>
<p> 数组是对象，里面的元素是primitive主数据类型</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>技术笔记</tag>
        <tag>Head First Java</tag>
      </tags>
  </entry>
</search>
